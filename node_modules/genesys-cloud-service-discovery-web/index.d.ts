export declare const ENVS: readonly ["dev", "test", "prod", "fedramp"];
export declare const STATUSES: readonly ["alpha", "beta", "stable", "archived"];
export interface Environment {
    env: typeof ENVS[number];
    /** Example: "prod-euw1" */
    name: string;
    /** Example: "eu-west-1" */
    region: string;
    /** Example: "mypurecloud.ie" */
    publicDomainName: string;
    /**
     * Web apps may need this in the future if/when we move away from PureCloud branded domains
     * Example: "genesys.cloud.ie"
     */
    publicDomainAliases: string[];
    /**
     * The status of the deployment. Useful for filtering which environments to retrieve
     * or display on the client in instances before we can resolve feature toggles.
     */
    status: typeof STATUSES[number];
}
export interface RuntimeEnvironment extends Environment {
    /**
     * Whether or not the detected runtime environment is local
     */
    local: boolean;
    /**
     * Preserves the hostname "state" of your url and matching environment.
     * Useful for instances where your hostname matches "publicDomainName" or one of "publicDomainAliases".
     * Intended to always be the base url to use to create deployed urls.
     */
    currentDomainName: string;
}
export declare type RuntimeParser = (url?: string, filters?: EnvironmentFilters) => RuntimeEnvironment | undefined;
export declare type EnvironmentFilters = {
    [P in 'env' | 'status']?: Array<Environment[P]>;
};
/**
 * Retrieves the list of Genesys Cloud environment/region deployments.
 * Defaults to only returning stable, publically available deployments (e.g. prod, fedramp)
 */
export declare const getEnvironments: (filters?: EnvironmentFilters) => Environment[];
/**
 * Whether or not the given url is a known Genesys Cloud deployment.  If no filters
 * are provided, the default behavior is to only check stable, publically available deployments
 * (e.g. prod, fedramp).
 *
 * - throws an error if passed an invalid url
 * - returns false for localhost
 */
export declare const isKnown: (url: string, filters?: EnvironmentFilters | undefined) => boolean;
/**
 * Retrieve the Genesys Cloud `Environment` for a given url.  If no filters
 * are provided, the default behavior is to only check stable, publically available deployments
 * (e.g. prod, fedramp).
 *
 * - throws an error if passed an invalid url
 * - returns undefined if no match is found
 */
export declare const parse: (url: string, filters?: EnvironmentFilters | undefined) => Environment | undefined;
/**
 * Retrieve the current Genesys Cloud runtime environment for the given url.
 * This method attempts to parse the hostname directly (uses `parse` under the hood).
 *
 * By default, this method will attempt to search across all available environments (no filtering).
 */
export declare const parseDeployedRuntime: RuntimeParser;
/**
 * When the hostname matches a valid local hostname, either by matching our defaults or your custom list
 * passed in the options, this method will attempt to match the first path param by name to an environment.
 * The list of environment names can be retrieved by calling `getEnvironments` and can be found under the
 * `name` key.
 *
 * By default, this method will attempt to search across all available environments (no filtering).
 *
 * Note: `currentDomainName` will be equal to `publicDomainName` when using this method.
 * Example: https://localhost:3000/prod => us-east-1 prod environment & runtime details
 */
export declare const parseRuntimeFromLocalPath: (localHostnames?: string[]) => RuntimeParser;
/**
 * This is the default and recommended `RuntimeParser` implementation that is composed of the
 * `parseDeployedRuntime` and `parseRuntimeFromLocalPath` parsers. You might opt to compose the
 * `parseDeployedRuntime` with your own `RuntimeParser` as an alternative to parseRuntimeFromLocalPath.
 * You may also opt to use "parse" and `getEnvironments` together to create your own parsing strategy.
 */
export declare const parseRuntime: RuntimeParser;
