'use strict';

/*
* purecloud-client-app-sdk
* @copyright Copyright (C) 2024 Genesys Telecommunications Laboratories, Inc.}
* @license MIT
*
* This software comprises other FOSS software.
* Attribution and license information can be found at https://github.com/MyPureCloud/client-app-sdk/blob/master/README.md
*/

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/createClass'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var queryString = require('query-string');
var _slicedToArray = _interopDefault(require('@babel/runtime/helpers/slicedToArray'));
var _toConsumableArray = _interopDefault(require('@babel/runtime/helpers/toConsumableArray'));
var genesysCloudServiceDiscoveryWeb = require('genesys-cloud-service-discovery-web');
var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _typeof = _interopDefault(require('@babel/runtime/helpers/typeof'));
var _get = _interopDefault(require('@babel/runtime/helpers/get'));
var _inherits = _interopDefault(require('@babel/runtime/helpers/inherits'));
var _possibleConstructorReturn = _interopDefault(require('@babel/runtime/helpers/possibleConstructorReturn'));
var _getPrototypeOf = _interopDefault(require('@babel/runtime/helpers/getPrototypeOf'));

var buildPcEnv = function buildPcEnv(tld) {
  return {
    pcEnvTld: tld,
    pcAppOrigin: "https://apps.".concat(tld)
  };
};

var DEFAULT_ENV_REGION = 'us-east-1';
var environments = genesysCloudServiceDiscoveryWeb.getEnvironments({
  env: ['prod', 'fedramp'],
  status: ['beta', 'stable']
});
var PC_ENV_TLDS = environments.reduce(function (tlds, env) {
  tlds.push(env.publicDomainName);
  tlds.push.apply(tlds, _toConsumableArray(env.publicDomainAliases));
  return tlds;
}, []).concat([]);

var _environments$filter = environments.filter(function (env) {
  return env.region === DEFAULT_ENV_REGION;
}),
    _environments$filter2 = _slicedToArray(_environments$filter, 1),
    defaultEnv = _environments$filter2[0];

var DEFAULT_PC_ENV = buildPcEnv(defaultEnv.publicDomainName);

function isKnownEnvName(toCheck, envs) {
  var envList = new Set([].concat(_toConsumableArray(envs), []).map(function (e) {
    return e.name;
  }));
  return envList.has(toCheck);
}

var matchesHostname = function matchesHostname(hostname) {
  return function (domain) {
    return hostname === domain || hostname.endsWith(".".concat(domain));
  };
};

function findPcEnvironment(location, targetEnv, envs) {
  var parsedEnv = [].concat(_toConsumableArray(envs), []).find(function (_ref) {
    var publicDomainName = _ref.publicDomainName,
        publicDomainAliases = _ref.publicDomainAliases;
    var domains = [publicDomainName].concat(_toConsumableArray(publicDomainAliases)).filter(function (d) {
      return !!d;
    });
    return domains.some(matchesHostname(location.hostname));
  });

  if (parsedEnv && parsedEnv.name === targetEnv) {
    return {
      pcEnvTld: parsedEnv.publicDomainName,
      pcAppOrigin: location.origin
    };
  }

  return null;
}
/**
 * Attempts to locate a PC environment corresponding to the provided search params
 *
 * @param pcEnvTld A string representing the Genesys Cloud environment top-level domain to search for
 * @param lenient When true, trims leading/trailing whitespace, ignores leading '.', and ignores trailing '/'.
 * @param envTlds A string array of all available Genesys Cloud environment top-level domains
 * @param hostAppDevOrigin The origin to target when the host app is running on `localhost`
 *
 * @returns A Genesys Cloud environment object if found; null otherwise.
 */


var lookupPcEnv = function lookupPcEnv(pcEnvTld) {
  var lenient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var envTlds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PC_ENV_TLDS;
  var hostAppDevOrigin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;

  if (pcEnvTld && typeof pcEnvTld === 'string') {
    if (pcEnvTld === 'localhost' && hostAppDevOrigin) {
      return {
        pcEnvTld: 'localhost',
        pcAppOrigin: hostAppDevOrigin
      };
    }

    var toSearch = pcEnvTld;

    if (lenient) {
      toSearch = toSearch.trim();

      if (toSearch.indexOf('.') === 0) {
        toSearch = toSearch.substring(1);
      }

      if (toSearch.indexOf('/') === toSearch.length - 1) {
        toSearch = toSearch.substring(0, toSearch.length - 1);
      }
    }

    if (envTlds.indexOf(toSearch) >= 0) {
      return buildPcEnv(toSearch);
    }
  }

  return null;
};
/**
 * Attempts to locate a GC environment corresponding to the provided origin/targetEnv combination
 * @param url A string representing the Genesys Cloud environment url
 * @param targetEnv A string representing the Genesys Cloud environment target
 * @param envs A Environment array of all available Genesys Cloud environments
 * @returns A Genesys Cloud environment object if found; null otherwise.
 */

var lookupGcEnv = function lookupGcEnv(url, targetEnv) {
  var envs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : environments;

  if (!isKnownEnvName(targetEnv, envs)) {
    return null;
  }

  try {
    var hostLocation = new URL(url);

    if (['localhost', '127.0.0.1'].includes(hostLocation.hostname)) {
      return {
        pcEnvTld: 'localhost',
        pcAppOrigin: hostLocation.origin
      };
    } else {
      return findPcEnvironment(hostLocation, targetEnv, envs);
    }
  } catch (_unused) {
    return null;
  }
};

var commsUtils = {
  /**
   * Posts the provided msg to the specified origin and parent window when invoked within the
   * expected environment (e.g. a frame hosted within Genesys Cloud).
   *
   * @param msg - The payload to send as a postMessage
   * @param tgtOrigin - The destination origin (see postMessage)
   * @param transfer - Transferable objects (see postMessage)
   * @param myWindow - The current execution window. Default window
   * @param myParent - The parent window to which the message should be posted. Default parent
   * @param myConsole - logs errors here rather than throwing errors. Default console
   *
   * @throws Error if the environment is invalid (e.g. not a browser, no postMessage api,
   *  not running within an iframe) and myConsole is not specified
   */
  postMsgToPc: function postMsgToPc(msg, tgtOrigin, transfer) {
    var myWindow = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : window;
    var myParent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : window.parent;
    var myConsole = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : window.console;
    var validRuntime = !!(myWindow && _typeof(myWindow) === 'object' && myParent && _typeof(myParent) === 'object');
    var validEnv = validRuntime && myParent !== myWindow;
    var validApi = !!(myParent && typeof myParent.postMessage === 'function');

    if (validRuntime && validEnv && validApi) {
      myParent.postMessage(msg, tgtOrigin, transfer);
    } else {
      var errMsg = 'PureCloud Communication Failed.  ';

      if (!validRuntime) {
        errMsg += 'Not running within a browser.';
      } else if (!validEnv) {
        errMsg += 'Not running within an iframe.';
      } else {
        errMsg += 'postMessage not supported in this browser.';
      }

      if (myConsole) {
        myConsole.error(errMsg);
      } else {
        throw new Error(errMsg);
      }
    }
  }
};

var PROTOCOL_NAME = 'purecloud-client-apps';

/**
 * Base Class for Genesys Cloud Client App APIs
 *
 * @since 1.0.0
 */
var BaseApi = /*#__PURE__*/function () {
  // ----- Message Listening

  /**
   * Injection point for tests.  Should not be used by api users or extenders.
   */

  /**
   * Injection point for tests.  Should not be used by api users or extenders.
   */

  /**
   * Injection point for tests.  Should not be used by api users or extenders.
   */

  /**
   * Instantiates the BaseApi
   *
   * @param cfg Optional configuration
   *
   * @since 1.0.0
   */
  function BaseApi() {
    var _this = this;

    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, BaseApi);

    _defineProperty(this, "_targetPcOrigin", void 0);

    _defineProperty(this, "_protocolDetails", void 0);

    _defineProperty(this, "_msgListenerCfgs", {});

    _defineProperty(this, "_msgHandler", function (event) {
      return _this._onMsg(event);
    });

    _defineProperty(this, "_commsUtils", commsUtils);

    _defineProperty(this, "_myWindow", window);

    _defineProperty(this, "_myParent", window ? window.parent : undefined);

    this._targetPcOrigin = cfg.targetPcOrigin || '*';
    this._protocolDetails = {
      name: cfg.protocol || PROTOCOL_NAME,
      agentName: cfg.protocolAgentName || "purecloud-client-app-sdk",
      agentVersion: cfg.protocolAgentVersion || "2.6.6"
    };
  }
  /**
   * Sends the message to Genesys Cloud augmenting with environmental details such as
   * target env origin and version info.  Accessible by extenders.
   *
   * @param actionName
   * @param msgPayload
   *
   * @since 1.0.0
   */


  _createClass(BaseApi, [{
    key: "sendMsgToPc",
    value: function sendMsgToPc(actionName, msgPayload) {
      this._commsUtils.postMsgToPc(this.buildSdkMsgPayload(actionName, msgPayload), this._targetPcOrigin);
    }
    /**
     * Constructs a payload tailored for the Genesys Cloud Client Apps SDK.  Can be
     * overridden by extenders, but should not be invoked externally.
     *
     * @param actionName - The name of the client-app action to invoke
     * @param msgPayload - Action-specific payload data
     *
     * @returns A postMessage payload for the Client Apps SDK
     *
     * @since 1.0.0
     */

  }, {
    key: "buildSdkMsgPayload",
    value: function buildSdkMsgPayload(actionName, msgPayload) {
      var result = {}; // Clone the payload

      if (msgPayload && _typeof(msgPayload) === 'object') {
        result = JSON.parse(JSON.stringify(msgPayload));
      }

      result.action = actionName;
      result.protocol = this._protocolDetails.name;
      result.protocolAgentName = this._protocolDetails.agentName;
      result.protocolAgentVersion = this._protocolDetails.agentVersion;
      return result;
    } // ----- Message Listening

    /**
     * Adds the specified listener to messages sent from the host Genesys Cloud appliation
     * on the specified eventType
     *
     * @param eventType - The name of the purecloudEventType in the message; case and leading/trailing space sensitive
     * @param listener - The listener function to invoke when a message of the specified eventType
     *   is received.  Message data will be passed
     * @param options - Options for the invocation of the listener; null/undefined will use defaults
     *
     * @since 1.0.0
     */

  }, {
    key: "addMsgListener",
    value: function addMsgListener(eventType, listener) {
      var _this2 = this;

      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!eventType || typeof eventType !== 'string' || eventType.trim().length === 0) {
        throw new Error('Invalid eventType provided to addMsgListener');
      }

      if (!listener || typeof listener !== 'function') {
        throw new Error('Invalid listener provided to addMsgListener');
      }

      var proposedListenerCfg = {
        listener: listener,
        options: this._buildNormalizedListenerOptions(options)
      };
      var duplicateListener = false;
      var listenerCfgs = this._msgListenerCfgs[eventType];

      if (!listenerCfgs) {
        listenerCfgs = [];
        this._msgListenerCfgs[eventType] = listenerCfgs;
      } else if (listenerCfgs.length > 0) {
        // Check for duplicates
        listenerCfgs.forEach(function (currListenerCfg) {
          if (_this2._isDuplicateListenerCfg(currListenerCfg, proposedListenerCfg)) {
            duplicateListener = true;
          }
        });
      }

      if (!duplicateListener) {
        listenerCfgs.push(proposedListenerCfg);

        if (this._getListenerCount() === 1) {
          // This is the addition of the only active listener, start listening
          this._subscribeToMsgs();
        }
      }
    }
    /**
     * Removes the specified listener from messages sent from the host Genesys Cloud appliation
     * on the specified eventType. eventType, listener (strict equality), and options must match.
     *
     * @param eventType - The name of the purecloudEventType previously registered; case and leading/trailing space sensitive
     * @param listener - The exact listener function instance that was previously registered.
     * @param options - Options registered with the listener;
     *  null and undefined trigger defaults and will be considered equal.
     *
     * @throws Error if the eventType, listener, or options are invalid
     *
     * @since 1.0.0
     */

  }, {
    key: "removeMsgListener",
    value: function removeMsgListener(eventType, listener) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!eventType || typeof eventType !== 'string' || eventType.trim().length === 0) {
        throw new Error('Invalid eventType provided to removeMsgListener');
      }

      if (!listener || typeof listener !== 'function') {
        throw new Error('Invalid listener provided to removeMsgListener');
      } // Note: Building the normalized options also validates the options param.
      // This should stay here to always validate the params regardless of eventType listener presence


      var listenerCfgToRemove = {
        listener: listener,
        options: this._buildNormalizedListenerOptions(options)
      };
      var eventTypeListenerCfgs = this._msgListenerCfgs[eventType];

      if (eventTypeListenerCfgs) {
        var listenerCfgIndex = -1;

        for (var index = 0; index < eventTypeListenerCfgs.length; index++) {
          if (this._isDuplicateListenerCfg(eventTypeListenerCfgs[index], listenerCfgToRemove)) {
            listenerCfgIndex = index;
            break;
          }
        }

        if (listenerCfgIndex >= 0) {
          eventTypeListenerCfgs.splice(listenerCfgIndex, 1);

          if (this._getListenerCount() === 0) {
            // No more listeners, tear down our listener
            this._unsubscribeFromMsgs();
          }
        }
      }
    }
    /**
     * Returns the total number of registered listeners.
     */

  }, {
    key: "_getListenerCount",
    value: function _getListenerCount() {
      var _this3 = this;

      var result = 0;
      Object.keys(this._msgListenerCfgs).forEach(function (currEventType) {
        var currListenerCfgs = _this3._msgListenerCfgs[currEventType];

        if (currListenerCfgs) {
          result += currListenerCfgs.length;
        }
      });
      return result;
    }
    /**
     * Initiate listening for messages from the host Genesys Cloud application
     */

  }, {
    key: "_subscribeToMsgs",
    value: function _subscribeToMsgs() {
      this._myWindow.addEventListener('message', this._msgHandler);
    }
    /**
     * Stop listening for messages from the host Genesys Cloud application
     */

  }, {
    key: "_unsubscribeFromMsgs",
    value: function _unsubscribeFromMsgs() {
      this._myWindow.removeEventListener('message', this._msgHandler);
    }
    /**
     * Message handler function that will filter message events and invoke the correct, registered
     * listeners.
     */

  }, {
    key: "_onMsg",
    value: function _onMsg(event) {
      var _this4 = this;

      if (!event || !event.source || !event.origin || event.source !== this._myParent || event.origin !== this._targetPcOrigin || !event.data || _typeof(event.data) !== 'object' || Array.isArray(event.data)) {
        // Fast-fail for invalid or unknown event
        return;
      } // Validate base payload


      var eventType = event.data.purecloudEventType;

      if (eventType && typeof eventType === 'string' && eventType.trim()) {
        var eventTypeListenerCfgs = this._msgListenerCfgs[eventType];

        if (eventTypeListenerCfgs && eventTypeListenerCfgs.length > 0) {
          var listenerCfgsToRemove = [];
          eventTypeListenerCfgs.forEach(function (currListenerCfg) {
            if (!currListenerCfg.options.msgPayloadFilter || currListenerCfg.options.msgPayloadFilter(event.data)) {
              // Clone the event data and prune internal props before sending the event to user-space
              var userSpaceEventData = JSON.parse(JSON.stringify(event.data));
              delete userSpaceEventData.protocol;
              currListenerCfg.listener(userSpaceEventData);

              if (currListenerCfg.options.once) {
                listenerCfgsToRemove.push(currListenerCfg);
              }
            }
          });

          if (listenerCfgsToRemove.length > 0) {
            listenerCfgsToRemove.forEach(function (currListenerCfg) {
              _this4.removeMsgListener(eventType, currListenerCfg.listener, currListenerCfg.options);
            });
          }
        }
      }
    }
    /**
     * Validates and normalizes listener options. msgPayloadFilter will be normalized to null and once
     * will be normalized to false if not specified or specified as an "empty" object (null/undefined).
     *
     * @param options The additional options config provided to [add|remove]MsgListener; null and undefined also allowed.
     *
     * @returns A normalized listener options object containing the msgPayloadFilter and once properties.
     * msgPayloadFilter will be null unless a valid function is explicitly provided.  once will be false unless true
     * is explictly provided.
     *
     * @throws Error if options is not null, undefined, or an object
     * @throws Error if options.msgPayloadFilter is not null, undefined, or a function
     * @throws Error if options.once is not null, undefined, or a boolean
     */

  }, {
    key: "_buildNormalizedListenerOptions",
    value: function _buildNormalizedListenerOptions(options) {
      var result = {
        msgPayloadFilter: null,
        once: false
      };

      if (options === null || options === undefined) {
        return result;
      }

      if (_typeof(options) !== 'object' || Array.isArray(options)) {
        throw new Error('Invalid options provided');
      }

      var filter = options.msgPayloadFilter;

      if (filter !== null && filter !== undefined && typeof filter !== 'function') {
        throw new Error('options.msgPayloadFilter must be a function if specified');
      }

      result.msgPayloadFilter = filter || null;

      if (options.once !== null && options.once !== undefined && typeof options.once !== 'boolean') {
        throw new Error('options.once must be a boolean if specified');
      }

      result.once = options.once || false;
      return result;
    }
    /**
     * Determines if the specified listener configs are duplicates with respect to
     * listener registration.  Assumes the configs will be normalized for easier comparison.
     *
     * @param listenerCfg1 The first config
     * @param listenerCfg2 The second config
     *
     * @returns true if the listener, msgPayloadFilter, and once are equal; false otherwise
     */

  }, {
    key: "_isDuplicateListenerCfg",
    value: function _isDuplicateListenerCfg(listenerCfg1, listenerCfg2) {
      return listenerCfg1.listener === listenerCfg2.listener && listenerCfg1.options.once === listenerCfg2.options.once && listenerCfg1.options.msgPayloadFilter === listenerCfg2.options.msgPayloadFilter;
    }
  }]);

  return BaseApi;
}();

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var VALID_MESSAGE_TYPES = ['error', 'info', 'success'];
var VALID_SUPPLEMENTAL_OPTIONS = ['id', 'markdownMessage', 'timeout', 'showCloseButton'];

var isValidMessageType = function isValidMessageType(type) {
  return VALID_MESSAGE_TYPES.indexOf(type) > -1;
};

var pick = function pick(obj, keys) {
  var newObj = {};
  keys.forEach(function (key) {
    newObj[key] = obj[key];
  });
  return newObj;
};

var defaultToastOptions = {
  type: 'info',
  timeout: 7,
  showCloseButton: true,
  markdownMessage: true
};
/**
 * Handles aspects of alerting and attention of this app with Genesys Cloud
 *
 * @noInheritDoc
 * @since 1.0.0
 */

var AlertingApi = /*#__PURE__*/function (_BaseApi) {
  _inherits(AlertingApi, _BaseApi);

  var _super = _createSuper(AlertingApi);

  function AlertingApi() {
    _classCallCheck(this, AlertingApi);

    return _super.apply(this, arguments);
  }

  _createClass(AlertingApi, [{
    key: "showToastPopup",

    /**
     * Displays a toast popup.
     *
     * Permanent/Sticky toasts are not allowed.  Therefore, toasts must specify either a manual
     * dismissal (`showCloseButton: true`) or an automatic dismissal (`timeout > 0`). Both
     * `showCloseButton` and `timeout` can be specified to provide both dismissal options.
     *
     * Error toasts (`type: 'error'`) require manual dismissal and must be explictly specified with `showCloseButton: true`.
     * TypeScript users will also specify `timeout: 0` while JavaScript users can specify 0 or omit the prop entirely.
     * The `timeout` prop will be ignored regardless.
     * 
     * **Toast Options:**
     * 
     * Name | Type | Default | Description |
     * `id` | string | your app's namespace | The id of the message.  Duplicate IDs will replace each other in the toast display.  All IDs will be namespaced with your app ID to avoid collisions. Default will just be your app's namespace and will not support multiple messages. |
     * `type` | 'error' &#124; 'info' &#124; 'success' | 'info' | The type of the toast message. |
     * `markdownMessage` |  boolean | true | Indicates if the message is in MD. |
     * `timeout` | number | 7 | Time in seconds to show the toast.  Set to `0` to disable automatic dismissal. `timeout` must be `0` for toasts with `type: 'error'`. |
     * `showCloseButton` | boolean | true | Indicates if the close button should be shown. Must be explicitly set to true when `timeout` is `0`. |
     * 
     * The type parameters impact the options config. The `MessageType` type extends `'error' | 'info' | 'success'`, and when it is set to `'error'`, it enforces that `timeout` is `0`. The `Timeout` type extends `number`, and when set to `0` it enforces that `showCloseButton` is `true` to prevent a permanent toast message.
     *
     * ```ts
     * myClientApp.alerting.showToastPopup("Hello world", "Hello world, how are you doing today?");
     * ```
     *
     * ```ts
     * var options = {
     *    type: 'success'
     * };
     * myClientApp.alerting.showToastPopup("Hello world", "Hello world, how are you doing today?", options);
     * ```
     *
     * ```ts
     * var options = {
     *    id: 'greeting',
     *    timeout: 0,
     *    showCloseButton: true
     * };
     * myClientApp.alerting.showToastPopup("Hello world", "Hello world, how are you doing today?", options);
     * // Set new id so the messages can show together
     * options.id = 'exit'
     * myClientApp.alerting.showToastPopup("Goodbye world", "See you later world", options);
     * ```
     *
     * ```ts
     * var options = {
     *    id: 'mdExample',
     *    markdownMessage: true
     * };
     * myClientApp.alerting.showToastPopup("Hello world", "Hello :earth_americas: How are *you* doing today?", options);
     * ```
     * 
     * @param title - Toast title.
     * @param message - Toast Message.  Supports emoticons, emoji (unicode, shortcodes) and markdown (with markdownMessage boolean).
     * @param options - Additonal toast options. 
     *
     * @since 1.0.0
     */
    value: function showToastPopup(title, message, options) {
      var toastOptions = options || defaultToastOptions;
      var messageParams = {
        title: title,
        message: message,
        type: 'info'
      };

      if (toastOptions && _typeof(toastOptions) === 'object') {
        if (toastOptions.type && typeof toastOptions.type === 'string') {
          var requestedType = toastOptions.type.trim().toLowerCase();

          if (isValidMessageType(requestedType)) {
            messageParams.type = requestedType;
          }
        }

        var validOptions = pick(toastOptions, VALID_SUPPLEMENTAL_OPTIONS);

        _extends(messageParams, validOptions);
      }

      _get(_getPrototypeOf(AlertingApi.prototype), "sendMsgToPc", this).call(this, 'showToast', messageParams);
    }
    /**
     * Displays badging for unread messages and notifications
     *
     * ```ts
     * myClientApp.alerting.setAttentionCount(2);
     * ```
     *
     * ```ts
     * myClientApp.alerting.setAttentionCount(0);
     * ```
     *
     * @param count - The updated number of unread messages or notifications
     *
     * @since 1.0.0
     */

  }, {
    key: "setAttentionCount",
    value: function setAttentionCount(count) {
      _get(_getPrototypeOf(AlertingApi.prototype), "sendMsgToPc", this).call(this, 'setAttentionCount', {
        count: count
      });
    }
  }]);

  return AlertingApi;
}(BaseApi);

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var LIFECYCLE_HOOK_EVENT_NAME = 'appLifecycleHook';

var buildHookFilter = function buildHookFilter(hookName) {
  return function (msgPayload) {
    return _typeof(msgPayload) === 'object' && msgPayload.hook === hookName;
  };
};

var BOOTSTRAP_HOOK_FILTER = buildHookFilter('bootstrap');
var FOCUS_HOOK_FILTER = buildHookFilter('focus');
var BLUR_HOOK_FILTER = buildHookFilter('blur');
var STOP_HOOK_FILTER = buildHookFilter('stop');
/**
 * Utilities for monitoring and updating the lifecycle of a Genesys Cloud Client App
 *
 * ### Lifecycle Hooks
 *
 * These utilities require the app to be opted into the appropriate lifecycle hook via
 * advanced configuration.  This can be set via the API, Admin UI, or hard-coded for Premium Apps.
 * The format of lifecycle hooks in advanced configuration is as follows:
 *
 * ```json
 * {
 *   "lifecycle": {
 *     "ephemeral": <boolean>,
 *     "hooks": {
 *       "stop": <boolean>,
 *       "blur": <boolean>,
 *       "focus": <boolean>,
 *       "bootstrap": <boolean>
 *     }
 *   }
 * }
 * ```
 *
 * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events) for more details
 * @noInheritDoc
 * @since 1.0.0
 */

var LifecycleApi = /*#__PURE__*/function (_BaseApi) {
  _inherits(LifecycleApi, _BaseApi);

  var _super = _createSuper$1(LifecycleApi);

  function LifecycleApi() {
    _classCallCheck(this, LifecycleApi);

    return _super.apply(this, arguments);
  }

  _createClass(LifecycleApi, [{
    key: "addBootstrapListener",

    /**
     * Attach a listener function to be called when Genesys Cloud has loaded the app.
     *
     * This provides a hook for implementers to do any post-load initialization
     * work with Genesys Cloud.  Implementers should call bootstrapped() after initialization work is
     * complete.  Genesys Cloud will eventually timeout and show the app anyway if the bootstrapped()
     * function is not called in a timely manor.
     *
     * #### Required Lifecycle Hooks ([More Info](/api/client-apps/advanced.html#lifecycle_events))
     * * `bootstrap`
     *
     * ```ts
     * myClientApp.lifecycle.addBootstrapListener(() => {
     *   // Perform bootstrap (post-load init) work
     *
     *   // Simulate 500ms delay
     *   window.setTimeout(() => {
     *     myClientApp.lifecycle.bootstrapped();
     *   }, 500);
     * });
     * ```
     * 
     * @param listener - The function to call when Genesys Cloud is ready for the app to
     * perform post-load initialization work.  This function will be passed the lifecycle event and
     * does not augment the this context.
     * @param once - If the listener should only be invoked once or repeatedly; true by default.
     *
     * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events)
     *
     * @since 1.0.0
     */
    value: function addBootstrapListener(listener) {
      var once = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.addMsgListener(LIFECYCLE_HOOK_EVENT_NAME, listener, {
        once: once,
        msgPayloadFilter: BOOTSTRAP_HOOK_FILTER
      });
    }
    /**
     * Signals Genesys Cloud that this app has finished its initialization work and
     * can be shown to the user.
     *
     * #### Required Lifecycle Hooks ([More Info](/api/client-apps/advanced.html#lifecycle_events))
     * * `bootstrap`
     *
     * ```ts
     * myClientApp.lifecycle.bootstrapped();
     * ```
     *
     * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events)
     *
     * @since 1.0.0
     */

  }, {
    key: "bootstrapped",
    value: function bootstrapped() {
      _get(_getPrototypeOf(LifecycleApi.prototype), "sendMsgToPc", this).call(this, 'bootstrapped');
    }
    /**
     * Remove a previously registered bootstrap lifecycle event listener.
     *
     * #### Required Lifecycle Hooks ([More Info](/api/client-apps/advanced.html#lifecycle_events))
     * * `bootstrap`
     * 
     * ```ts
     * let onBootstrap = evt => {
     *   // Perform bootstrap (post-load init) work
     *
     *   // Remove the listener. [Note:] once must be provided to match
     *   myClientApp.lifecycle.removeBootstrapListener(onBootstrap, false);
     * };
     * // Note once must be set to false or the listener will be auto-removed by default
     * myClientApp.lifecycle.addBootstrapListener(onBootstrap, false);
     * ```
     *
     * @param listener - The previously registered bootstrap event listener.
     * @param once - false if once was explicitly set as false when adding the listener;
     *  otherwise, you can explicitly provide true or rely on the default.
     *
     * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events)
     *
     * @since 1.0.0
     */

  }, {
    key: "removeBootstrapListener",
    value: function removeBootstrapListener(listener) {
      var once = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.removeMsgListener(LIFECYCLE_HOOK_EVENT_NAME, listener, {
        once: once,
        msgPayloadFilter: BOOTSTRAP_HOOK_FILTER
      });
    }
    /**
     * Attach a listener function to be called when the user has re-focused your app.
     * [Note:] Focus is not called on initial show.  Use the bootstrap listener for that work.
     *
     * #### Required Lifecycle Hooks ([More Info](/api/client-apps/advanced.html#lifecycle_events))
     * * `focus`
     * 
     * ```ts
     * let onFocus = evt => {
     *   // Perform focus work
     * };
     * myClientApp.lifecycle.addFocusListener(onFocus);
     *
     * // Don't forget to remove this listener inside the stop event listener
     * myClientApp.lifecycle.addStopListener(() => {
     *   myClientApp.lifecycle.removeFocusListener(onFocus);
     * });
     * ```
     *
     * @param listener - The function to call when the user has re-focused your app in the UI.
     * @param once - If the listener should only be invoked once or repeatedly; false by default.
     *
     * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events)
     *
     * @since 1.0.0
     */

  }, {
    key: "addFocusListener",
    value: function addFocusListener(listener) {
      var once = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.addMsgListener(LIFECYCLE_HOOK_EVENT_NAME, listener, {
        once: once,
        msgPayloadFilter: FOCUS_HOOK_FILTER
      });
    }
    /**
     * Remove a previously registered focus lifecycle event listener
     *
     * #### Required Lifecycle Hooks ([More Info](/api/client-apps/advanced.html#lifecycle_events))
     * * `focus`
     * 
     * ```ts
     * let onFocus = evt => {
     *   // Perform focus work
     * };
     * myClientApp.lifecycle.addFocusListener(onFocus);
     *
     * // Don't forget to remove this listener inside the stop event listener
     * myClientApp.lifecycle.addStopListener(() => {
     *   myClientApp.lifecycle.removeFocusListener(onFocus);
     * });
     * ```
     *
     * @param listener - The previously registered focus event listener.
     * @param once - true if once was explicitly set as true when adding the listener;
     *  otherwise, you can explicitly provide false or rely on the default.
     *
     * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events)
     *
     * @since 1.0.0
     */

  }, {
    key: "removeFocusListener",
    value: function removeFocusListener(listener) {
      var once = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.removeMsgListener(LIFECYCLE_HOOK_EVENT_NAME, listener, {
        once: once,
        msgPayloadFilter: FOCUS_HOOK_FILTER
      });
    }
    /**
     * Attach a listener function to be called when the user has left/blurred your app.
     *
     * #### Required Lifecycle Hooks ([More Info](/api/client-apps/advanced.html#lifecycle_events))
     * * `blur`
     * 
     * ```ts
     * let onBlur = evt => {
     *   // Perform blur work
     * };
     * myClientApp.lifecycle.addBlurListener(onBlur);
     *
     * // Don't forget to remove this listener inside the stop event listener
     * myClientApp.lifecycle.addStopListener(() => {
     *   myClientApp.lifecycle.removeBlurListener(onBlur);
     * });
     * ```
     *
     * @param listener - The function to call when the user has left your
     * app in the UI.
     * @param once - If the listener should only be invoked once or repeatedly; false by default.
     *
     * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events)
     *
     * @since 1.0.0
     */

  }, {
    key: "addBlurListener",
    value: function addBlurListener(listener) {
      var once = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.addMsgListener(LIFECYCLE_HOOK_EVENT_NAME, listener, {
        once: once,
        msgPayloadFilter: BLUR_HOOK_FILTER
      });
    }
    /**
     * Remove a previously registered blur lifecycle event listener
     *
     * #### Required Lifecycle Hooks ([More Info](/api/client-apps/advanced.html#lifecycle_events))
     * * `blur`
     * 
     * ```ts
     * let onBlur = evt => {
     *   // Perform blur work
     * };
     * myClientApp.lifecycle.addBlurListener(onBlur);
     *
     * // Don't forget to remove this listener inside the stop event listener
     * myClientApp.lifecycle.addStopListener(() => {
     *   myClientApp.lifecycle.removeBlurListener(onBlur);
     * });
     * ```
     *
     * @param listener - The previously registered blur event listener.
     * @param once - true if once was explicitly set as true when adding the listener;
     *  otherwise, you can explicitly provide false or rely on the default.
     *
     * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events)
     *
     * @since 1.0.0
     */

  }, {
    key: "removeBlurListener",
    value: function removeBlurListener(listener) {
      var once = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.removeMsgListener(LIFECYCLE_HOOK_EVENT_NAME, listener, {
        once: once,
        msgPayloadFilter: BLUR_HOOK_FILTER
      });
    }
    /**
     * Attach a listener function to be called when Genesys Cloud is about to shut down your app.
     * For instance, this can happen if the user has loaded too many apps and your app needs to be
     * stopped to conserve resources.
     *
     * This provides a hook for you to do any app cleanup work.  Implementers should call
     * stopped() after shutdown work is complete.  Genesys Cloud will eventually timeout and permanenty
     * remove the app anyway if stopped() is not called in a timely manor.
     *
     * #### Required Lifecycle Hooks ([More Info](/api/client-apps/advanced.html#lifecycle_events))
     * * `stop`
     * 
     * ```ts
     * myClientApp.lifecycle.addStopListener(() => {
     *   // Perform shutdown work
     *
     *   // Simulate 500ms delay
     *   window.setTimeout(() => {
     *     myClientApp.lifecycle.stopped();
     *   }, 500);
     * });
     * ```
     *
     * @param listener - The function to call when Genesys Cloud is about to stop this app.
     * This function will be passed the lifecycle event and does not augment the this context.
     * @param once - If the listener should only be invoked once or repeatedly; true by default.
     *
     * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events)
     *
     * @since 1.0.0
     */

  }, {
    key: "addStopListener",
    value: function addStopListener(listener) {
      var once = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.addMsgListener(LIFECYCLE_HOOK_EVENT_NAME, listener, {
        once: once,
        msgPayloadFilter: STOP_HOOK_FILTER
      });
    }
    /**
     * Signals Genesys Cloud that this app has finished its tear down work and the iframe
     * can be removed from Genesys Cloud permanently.
     *
     * #### Required Lifecycle Hooks ([More Info](/api/client-apps/advanced.html#lifecycle_events))
     * * `stop`
     *
     * ```ts
     * myClientApp.lifecycle.stopped();
     * ```
     *
     * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events)
     *
     * @since 1.0.0
     */

  }, {
    key: "stopped",
    value: function stopped() {
      _get(_getPrototypeOf(LifecycleApi.prototype), "sendMsgToPc", this).call(this, 'stopped');
    }
    /**
     * Remove a previously registered stop lifecycle event listener.
     *
     * #### Required Lifecycle Hooks ([More Info](/api/client-apps/advanced.html#lifecycle_events))
     * * `stop`
     * 
     * ```ts
     * let onStop = evt => {
     *   // Perform cleanup work
     *
     *   // Don't forget to notify Genesys Cloud on complete
     *   myClientApp.lifecycle.stopped();
     *
     *   // Remove the stop listener (since you passed false for the once option)
     *   // Note: You must also pass false for once to match the listener
     *   myClientApp.lifecycle.removeStopListener(onStop, false);
     * };
     * // Note: once must be set to false or the listener will be auto-removed by default
     * myClientApp.lifecycle.addStopListener(onStop, false);
     * ```
     *
     * @param listener - The previously registered stop event listener.
     * @param once - false if once was explicitly set as false when adding the listener;
     *  otherwise, you can explicitly provide true or rely on the default.
     *
     * @see [Advanced Application Concepts - Lifecycle Events](/api/client-apps/advanced.html#lifecycle_events)
     *
     * @since 1.0.0
     */

  }, {
    key: "removeStopListener",
    value: function removeStopListener(listener) {
      var once = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.removeMsgListener(LIFECYCLE_HOOK_EVENT_NAME, listener, {
        once: once,
        msgPayloadFilter: STOP_HOOK_FILTER
      });
    }
  }]);

  return LifecycleApi;
}(BaseApi);

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 * Utilities for interacting with general Genesys Cloud App UI components
 *
 * @noInheritDoc
 * @since 1.0.0
 */

var CoreUiApi = /*#__PURE__*/function (_BaseApi) {
  _inherits(CoreUiApi, _BaseApi);

  var _super = _createSuper$2(CoreUiApi);

  function CoreUiApi() {
    _classCallCheck(this, CoreUiApi);

    return _super.apply(this, arguments);
  }

  _createClass(CoreUiApi, [{
    key: "showHelp",

    /**
     * Show the help UI.  Noop if already shown.
     *
     * ```ts
     * myClientApp.coreUi.showHelp();
     * ```
     *
     * @since 1.0.0
     */
    value: function showHelp() {
      _get(_getPrototypeOf(CoreUiApi.prototype), "sendMsgToPc", this).call(this, 'showHelp');
    }
    /**
     * Open the help panel to the specified Resource Center artifact
     *
     * ```ts
     * // Direct path
     * myClientApp.coreUi.showResourceCenterArtifact('articles/complete-profile');
     * ```
     *
     * ```ts
     * // Permalink
     * myClientApp.coreUi.showResourceCenterArtifact('?p=7711');
     * ```
     * 
     * @param artifactRelPath - The path of the Resource Center artifact
     * relative to the Resource Center root.  Supports paths and query string params,
     * but not hash params.  The appropriate theme will be inserted automatically.
     *
     * @since 1.0.0
     */

  }, {
    key: "showResourceCenterArtifact",
    value: function showResourceCenterArtifact(artifactRelPath) {
      _get(_getPrototypeOf(CoreUiApi.prototype), "sendMsgToPc", this).call(this, 'showResourceCenterArtifact', {
        resourceCenterRelPath: artifactRelPath
      });
    }
    /**
     * Hide the help UI.  Noop if already hidden.
     *
     * ```ts
     * myClientApp.coreUi.hideHelp();
     * ```
     *
     * @since 1.0.0
     */

  }, {
    key: "hideHelp",
    value: function hideHelp() {
      _get(_getPrototypeOf(CoreUiApi.prototype), "sendMsgToPc", this).call(this, 'hideHelp');
    }
    /**
     * Open a URL in a new window.
     *
     * ```ts
     * myClientApp.coreUi.openWindow("https://en.wikipedia.org/wiki/Main_Page");
     * ```
     *
     * @param targetUrl - The URL to open in a new window
     *
     * @since 2.3.0
     */

  }, {
    key: "openWindow",
    value: function openWindow(targetUrl) {
      _get(_getPrototypeOf(CoreUiApi.prototype), "sendMsgToPc", this).call(this, 'openWindow', {
        targetUrl: targetUrl
      });
    }
  }]);

  return CoreUiApi;
}(BaseApi);

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 * Utilities for interacting with users in the Genesys Cloud Client
 *
 * @noInheritDoc
 * @since 1.0.0
 *
 * @deprecated Use {@link DirectoryApi} instead. (Since 2.3.0)
 */

var UsersApi = /*#__PURE__*/function (_BaseApi) {
  _inherits(UsersApi, _BaseApi);

  var _super = _createSuper$3(UsersApi);

  function UsersApi() {
    _classCallCheck(this, UsersApi);

    return _super.apply(this, arguments);
  }

  _createClass(UsersApi, [{
    key: "showProfile",

    /**
     * Shows the profile of a specified user
     *
     * ```ts
     * myClientApp.users.showProfile("targetUserId");
     * ```
     *
     * @param userId - The id of the user to show
     *
     * @since 1.0.0
     *
     * @deprecated Use {@link ClientApp#directory#showUser} instead. (Since 2.3.0)
     *
     * @see [DirectoryApi#showUser](directoryapi.md#showuser) for a replacement.
     */
    value: function showProfile(userId) {
      _get(_getPrototypeOf(UsersApi.prototype), "sendMsgToPc", this).call(this, 'showProfile', {
        'profileId': userId
      });
    }
  }]);

  return UsersApi;
}(BaseApi);

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 * Utilities for interacting with the company directory in the Genesys Cloud Client
 *
 * @noInheritDoc
 * @since 2.3.0
 */

var DirectoryApi = /*#__PURE__*/function (_BaseApi) {
  _inherits(DirectoryApi, _BaseApi);

  var _super = _createSuper$4(DirectoryApi);

  function DirectoryApi() {
    _classCallCheck(this, DirectoryApi);

    return _super.apply(this, arguments);
  }

  _createClass(DirectoryApi, [{
    key: "showUser",

    /**
     * Shows the profile of a specified user
     *
     * ```ts
     * myClientApp.directory.showUser("targetUserId");
     * ```
     *
     * @param userId - The id of the user to show
     *
     * @since 2.3.0
     */
    value: function showUser(userId) {
      _get(_getPrototypeOf(DirectoryApi.prototype), "sendMsgToPc", this).call(this, 'showProfile', {
        profileId: userId
      });
    }
    /**
     * Shows the specified group
     *
     * ```ts
     * myClientApp.directory.showGroup("targetGroupId");
     * ```
     *
     * @param groupId - The id of the group to show
     *
     * @since 2.3.0
     */

  }, {
    key: "showGroup",
    value: function showGroup(groupId) {
      _get(_getPrototypeOf(DirectoryApi.prototype), "sendMsgToPc", this).call(this, 'showGroup', {
        groupId: groupId
      });
    }
  }]);

  return DirectoryApi;
}(BaseApi);

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 * Utilities for interacting with Genesys Cloud conversations
 *
 * @noInheritDoc
 * @since 1.1.0
 */

var ConversationsApi = /*#__PURE__*/function (_BaseApi) {
  _inherits(ConversationsApi, _BaseApi);

  var _super = _createSuper$5(ConversationsApi);

  function ConversationsApi() {
    _classCallCheck(this, ConversationsApi);

    return _super.apply(this, arguments);
  }

  _createClass(ConversationsApi, [{
    key: "showInteractionDetails",

    /**
     * Show an interaction by ID.
     *
     * Required Permissions:
     * * ALL Of
     *     * analytics:conversationDetail:view
     *     * analytics:conversationAggregate:view
     *     * ANY Of
     *         * conversation:communication:view
     *         * quality:evaluation:add
     *         * quality:calibration:view
     *         * quality:evaluation:editScore
     *
     * ```ts
     * myClientApp.conversations.showInteractionDetails('af2ef59d-9bc5-4436-8738-97c04869c81c');
     * ```
     *
     * @since 1.1.0
     */
    value: function showInteractionDetails(conversationId) {
      _get(_getPrototypeOf(ConversationsApi.prototype), "sendMsgToPc", this).call(this, 'showInteractionDetails', {
        conversationId: conversationId
      });
    }
    /**
     * Send a message to be filled into the interaction message box for the agent to review and send.
     * This function works specifically with a bound interaction when both the interaction and calling app
     * are visible, it is not intended (and will not work) for situations where the interaction is not active.
     * Furthermore, this function should only be called in response to user interaction to ensure the agent is
     * aware of the impending text insertion and so their existing draft state is not unexpectedly altered.
     * 
     * @param mode - The insertion mode to use when injecting the text into the agent's text box.
     * 'insert' -> injects text at agent's cursor position, leaving other text intact.
     * 
     * @param message - The message to inject into the agent's text box.
     */

  }, {
    key: "proposeInteractionMessage",
    value: function proposeInteractionMessage(mode, message) {
      _get(_getPrototypeOf(ConversationsApi.prototype), "sendMsgToPc", this).call(this, 'proposeInteractionMessage', {
        mode: mode,
        message: message
      });
    }
  }]);

  return ConversationsApi;
}(BaseApi);

function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 * Utilities for showing agent level interaction and evaluation details
 *
 * @noInheritDoc
 * @since 1.3.0
 */

var MyConversationsApi = /*#__PURE__*/function (_BaseApi) {
  _inherits(MyConversationsApi, _BaseApi);

  var _super = _createSuper$6(MyConversationsApi);

  function MyConversationsApi() {
    _classCallCheck(this, MyConversationsApi);

    return _super.apply(this, arguments);
  }

  _createClass(MyConversationsApi, [{
    key: "showInteractionDetails",

    /**
     * Show an agent his/her interaction by ID.
     *
     * Required Permissions:
     * * ALL Of
     *     * User must be an Agent participant on the conversation
     *     * ONE Of
     *         * Implicit Conversation Access via participant on the Conversation
     *         * conversation:communication:view
     *
     * ```ts
     * myClientApp.myConversations.showInteractionDetails(
     *   'B1B0B92B-B944-4F5D-AF62-8E5BAFFC9298',
     * );
     * ```
     * 
     * @param conversationId The id of the conversation
     * 
     * @since 1.3.0
     */
    value: function showInteractionDetails(conversationId) {
      _get(_getPrototypeOf(MyConversationsApi.prototype), "sendMsgToPc", this).call(this, 'showMyInteractionDetails', {
        'conversationId': conversationId
      });
    }
    /**
     * Show an agent his/her evaluation details by conversation and evaluation IDs.
     *
     * Required Permissions:
     * * ALL Of
     *     * User must be the Agent evaluated on the specified conversation/evaluation
     *     * quality:evaluation:view
     * 
     * ```ts
     * myClientApp.myConversations.showEvaluationDetails(
     *   'B1B0B92B-B944-4F5D-AF62-8E5BAFFC9298',
     *   '0E3759CE-2275-4480-BB15-3D4717446F93',
     * );
     * ```
     *
     * @param conversationId The id of the conversation
     * @param evaluationId The id of the evaluation
     *
     * @since 1.3.0
     */

  }, {
    key: "showEvaluationDetails",
    value: function showEvaluationDetails(conversationId, evaluationId) {
      _get(_getPrototypeOf(MyConversationsApi.prototype), "sendMsgToPc", this).call(this, 'showMyEvaluationDetails', {
        'conversationId': conversationId,
        'evaluationId': evaluationId
      });
    }
  }]);

  return MyConversationsApi;
}(BaseApi);

function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
/**
 * Utilities for interacting with External Contacts
 *
 * @noInheritDoc
 * @since 1.4.0
 */

var ExternalContactsApi = /*#__PURE__*/function (_BaseApi) {
  _inherits(ExternalContactsApi, _BaseApi);

  var _super = _createSuper$7(ExternalContactsApi);

  function ExternalContactsApi() {
    _classCallCheck(this, ExternalContactsApi);

    return _super.apply(this, arguments);
  }

  _createClass(ExternalContactsApi, [{
    key: "showExternalContactProfile",

    /**
     * Show an external contact by ID.
     *
     * Required Permissions:
     * * ANY Of
     *     * externalContacts:contact:view
     *
     * ```ts
     * myClientApp.externalContacts.showExternalContactProfile('b33491ce-0a84-4959-9273-848901d6db11');
     * ```
     *
     * @since 1.4.0
     */
    value: function showExternalContactProfile(externalContactId) {
      _get(_getPrototypeOf(ExternalContactsApi.prototype), "sendMsgToPc", this).call(this, 'showExternalContactProfile', {
        contactId: externalContactId
      });
    }
    /**
     * Show an external organization by ID.
     *
     * Required Permissions:
     * * ANY Of
     *     * externalContacts:externalOrganization:view
     *
     * ```ts
     * myClientApp.externalContacts.showExternalOrganizationProfile('8a0db7c8-c4a3-4577-b41e-aa40a6408f1c');
     * ```
     *
     * @since 1.4.0
     */

  }, {
    key: "showExternalOrganizationProfile",
    value: function showExternalOrganizationProfile(externalOrganizationId) {
      _get(_getPrototypeOf(ExternalContactsApi.prototype), "sendMsgToPc", this).call(this, 'showExternalOrganizationProfile', {
        externalOrganizationId: externalOrganizationId
      });
    }
  }]);

  return ExternalContactsApi;
}(BaseApi);

/**
 * Provides bi-directional communication and integration between this instance of a Genesys Cloud Client Application
 * and the Genesys Cloud host application
 */

var ClientApp = /*#__PURE__*/function () {
  /**
   * The private reference to the known PC environment which is set, inferred, or defaulted by the config provided to the instance.
   */

  /**
   * The private reference to the custom origin, if provided.
   */

  /**
   * The AlertingApi instance.
   *
   * ```ts
   * let clientApp = new ClientApp({
   *   gcHostOriginQueryParam: 'gcHostOrigin',
   *   gcTargetEnvQueryParam: 'gcTargetEnv'
   * });
   *
   * clientApp.alerting.someMethod(...);
   * ```
   */

  /**
   * The LifecycleApi instance.
   *
   * ```ts
   * let clientApp = new ClientApp({
   *   gcHostOriginQueryParam: 'gcHostOrigin',
   *   gcTargetEnvQueryParam: 'gcTargetEnv'
   * });
   *
   * clientApp.lifecycle.someMethod(...);
   * ```
   */

  /**
   * The CoreUIApi instance.
   *
   * ```ts
   * let clientApp = new ClientApp({
   *   gcHostOriginQueryParam: 'gcHostOrigin',
   *   gcTargetEnvQueryParam: 'gcTargetEnv'
   * });
   *
   * clientApp.coreUi.someMethod(...);
   * ```
   */

  /**
   * The UsersApi instance.
   *
   * ```ts
   * let clientApp = new ClientApp({
   *   gcHostOriginQueryParam: 'gcHostOrigin',
   *   gcTargetEnvQueryParam: 'gcTargetEnv'
   * });
   *
   * clientApp.users.someMethod(...);
   * ```
   *
   * @deprecated Use {@link directory} property instead. (Since 2.3.0)
   */

  /**
   * The DirectoryApi instance.
   *
   * ```ts
   * let clientApp = new ClientApp({
   *   gcHostOriginQueryParam: 'gcHostOrigin',
   *   gcTargetEnvQueryParam: 'gcTargetEnv'
   * });
   *
   * clientApp.directory.someMethod(...);
   * ```
   * @since 2.3.0
   */

  /**
   * The ConversationsApi instance.
   *
   * ```ts
   * let clientApp = new ClientApp({
   *   gcHostOriginQueryParam: 'gcHostOrigin',
   *   gcTargetEnvQueryParam: 'gcTargetEnv'
   * });
   *
   * clientApp.conversations.someMethod(...);
   * ```
   */

  /**
   * The MyConversationsApi instance.
   *
   * ```ts
   * let clientApp = new ClientApp({
   *   gcHostOriginQueryParam: 'gcHostOrigin',
   *   gcTargetEnvQueryParam: 'gcTargetEnv'
   * });
   *
   * clientApp.myConversations.someMethod(...);
   * ```
   *
   * @since 1.3.0
   */

  /**
   * The External Contacts instance.
   *
   * ```ts
   * let clientApp = new ClientApp({
   *   gcHostOriginQueryParam: 'gcHostOrigin',
   *   gcTargetEnvQueryParam: 'gcTargetEnv'
   * });
   *
   * clientApp.externalContacts.someMethod(...);
   * ```
   *
   * @since 1.4.0
   */

  /**
   * Constructs an instance of a Genesys Cloud Client Application to communicate with Genesys Cloud
   *
   * ```ts
   * let clientApp = new ClientApp({
   *   gcHostOriginQueryParam: 'gcHostOrigin',
   *   gcTargetEnvQueryParam: 'gcTargetEnv'
   * });
   * ```
   *
   * @param cfg - Runtime config of the client
   */
  function ClientApp() {
    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ClientApp);

    _defineProperty(this, "_pcEnv", null);

    _defineProperty(this, "_customPcOrigin", null);

    _defineProperty(this, "alerting", void 0);

    _defineProperty(this, "lifecycle", void 0);

    _defineProperty(this, "coreUi", void 0);

    _defineProperty(this, "users", void 0);

    _defineProperty(this, "directory", void 0);

    _defineProperty(this, "conversations", void 0);

    _defineProperty(this, "myConversations", void 0);

    _defineProperty(this, "externalContacts", void 0);

    if (cfg) {
      var parsedQueryString = queryString.parse(ClientApp._getQueryString() || '');

      if ('gcHostOriginQueryParam' in cfg || 'gcTargetEnvQueryParam' in cfg) {
        this.assertNonEmptyString(cfg.gcHostOriginQueryParam, 'host origin query param name');
        this.assertNonEmptyString(cfg.gcTargetEnvQueryParam, 'target env query param name');
        var parsedGcHostOrigin = parsedQueryString[cfg.gcHostOriginQueryParam];
        var parsedGcTargetEnv = parsedQueryString[cfg.gcTargetEnvQueryParam];
        this.assertNonEmptyString(parsedGcHostOrigin, 'host origin parsed query param');
        this.assertNonEmptyString(parsedGcTargetEnv, 'target env parsed query param');
        this._pcEnv = this.lookupGcEnv(parsedGcHostOrigin, parsedGcTargetEnv);
      } else if ('gcHostOrigin' in cfg || 'gcTargetEnv' in cfg) {
        this.assertNonEmptyString(cfg.gcHostOrigin, 'gcHostOrigin');
        this.assertNonEmptyString(cfg.gcTargetEnv, 'gcTargetEnv');
        this._pcEnv = this.lookupGcEnv(cfg.gcHostOrigin, cfg.gcTargetEnv);
      } else if ('pcEnvironmentQueryParam' in cfg) {
        var paramName = cfg.pcEnvironmentQueryParam;
        this.assertNonEmptyString(paramName, 'query param name');
        var paramValue = parsedQueryString[paramName];
        this.assertNonEmptyString(paramValue, "value for query param '".concat(paramName, "'"));
        this._pcEnv = this.lookupEnv(paramValue);
      } else if ('pcEnvironment' in cfg) {
        this.assertNonEmptyString(cfg.pcEnvironment, 'pcEnvironment');
        this._pcEnv = this.lookupEnv(cfg.pcEnvironment);
      } else if ('pcOrigin' in cfg) {
        this.assertNonEmptyString(cfg.pcOrigin, 'pcOrigin');
        this._customPcOrigin = cfg.pcOrigin;
      }
    }

    if (!this._pcEnv && !this._customPcOrigin) {
      // Use the default PC environment
      this._pcEnv = DEFAULT_PC_ENV;
    }

    var apiCfg = {
      targetPcOrigin: this._pcEnv ? this._pcEnv.pcAppOrigin : this._customPcOrigin
    };
    this.alerting = new AlertingApi(apiCfg);
    this.lifecycle = new LifecycleApi(apiCfg);
    this.coreUi = new CoreUiApi(apiCfg);
    this.users = new UsersApi(apiCfg);
    this.directory = new DirectoryApi(apiCfg);
    this.conversations = new ConversationsApi(apiCfg);
    this.myConversations = new MyConversationsApi(apiCfg);
    this.externalContacts = new ExternalContactsApi(apiCfg);
  }

  _createClass(ClientApp, [{
    key: "assertNonEmptyString",
    value: function assertNonEmptyString(value, name) {
      if (typeof value !== 'string' || value.trim().length === 0) {
        throw new Error("Invalid ".concat(name, " provided.  Must be a non-null, non-empty string"));
      }
    }
  }, {
    key: "lookupEnv",
    value: function lookupEnv(env, envTlds, hostAppDevOrigin) {
      var pcEnv = lookupPcEnv(env, true, envTlds, hostAppDevOrigin);
      if (!pcEnv) throw new Error("Could not parse '".concat(env, "' into a known PureCloud environment"));
      return pcEnv;
    }
  }, {
    key: "lookupGcEnv",
    value: function lookupGcEnv$1(hostOrigin, targetEnv, envs) {
      var pcEnv = lookupGcEnv(hostOrigin, targetEnv, envs);

      if (!pcEnv) throw new Error("Could not parse ".concat(hostOrigin, " (").concat(targetEnv, ") into a known GenesysCloud environment"));
      return pcEnv;
    }
    /**
     * Returns the pcEnvironment (e.g. mypurecloud.com, mypurecloud.jp) if known; null otherwise.
     * This value will be available if a valid Genesys Cloud Environment is provided, inferred, or
     * defaulted from the config passed to this instance.
     *
     * @returns the valid Genesys Cloud environment; null if unknown.
     *
     * @since 1.0.0
     */

  }, {
    key: "pcEnvironment",
    get: function get() {
      return this.gcEnvironment;
    }
    /**
     * Returns the gcEnvironment (e.g. mypurecloud.com, mypurecloud.jp) if known; null otherwise.
     * This value will be available if a valid Genesys Cloud Environment is provided, inferred, or
     * defaulted from the config passed to this instance.
     *
     * @returns the valid Genesys Cloud environment; null if unknown.
     *
     * @since 2.6.3
     */

  }, {
    key: "gcEnvironment",
    get: function get() {
      return this._pcEnv ? this._pcEnv.pcEnvTld : null;
    }
    /**
     * Displays the version of the PureClound Client App SDK.
     *
     * ```ts
     * ClientApp.version
     * ```
     *
     * @returns The version of the Genesys Cloud Client App SDK
     *
     * @since 1.0.0
     */

  }], [{
    key: "about",

    /**
     * Displays information about this version of the PureClound Client App SDK.
     *
     * ```ts
     * ClientApp.about(); // SDK details returned as a string
     * ```
     *
     * @returns A string of information describing this library
     *
     * @since 1.0.0
     */
    value: function about() {
      return "purecloud-client-app-sdk".concat("v", "2.6.6");
    }
    /**
     * A private utility method
     *
     * @ignore
     */

  }, {
    key: "_getQueryString",
    value: function _getQueryString() {
      return window && window.location ? window.location.search : null;
    }
  }, {
    key: "version",
    get: function get() {
      return "2.6.6";
    }
  }]);

  return ClientApp;
}();

module.exports = ClientApp;
